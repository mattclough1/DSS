{"version":3,"sources":["webpack:///webpack/bootstrap fcb6de91739100dbbabd","webpack:///./src/util/trimWhitespace.js","webpack:///./src/util/index.js","webpack:///./src/util/singleLineComment.js","webpack:///./src/dss.js","webpack:///./src/util/cleanLine.js","webpack:///./src/util/endMultiLineComment.js","webpack:///./src/util/getStrIndex.js","webpack:///./src/util/normalize.js","webpack:///./src/util/size.js","webpack:///./src/util/squeeze.js","webpack:///./src/util/startMultiLineComment.js","webpack:///./src/util/trimMultiLine.js","webpack:///./src/util/trimSingleLine.js","webpack:///./src/index.js"],"names":["trimWhitespace","str","arr","defaults","newArr","Array","isArray","concat","trimmedStr","forEach","regEx","replace","endMultiLineComment","trimMultiLine","trimSingleLine","singleLineComment","startMultiLineComment","size","squeeze","normalize","getStrIndex","cleanLine","line","match","DSS","parsers","parse","bind","detector","alias","detect","callback","name","newName","oldName","_temp","block","file","from","to","options","temp","parts","index","length","substr","output","contents","indexOf","nextParserIndex","markupLength","parserMarker","split","splice","join","console","log","newLine","call","push","Object","assign","lines","currentBlock","insideSingleLineBlock","insideMultiLineBlock","unparsedBlocks","trimmed","parsedBlocks","lineNum","toString","text","_block","filter","parseLine","blocks","ret","i","pattern","cleanedLine","find","textBlock","indentSize","normalized","map","precedingWhitespace","slice","obj","keys","def","dss","reference","pop","parser","state","escaped","description","example"],"mappings":"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","file":"dss.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 13);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap fcb6de91739100dbbabd","/*\n* Trim whitespace from string\n*\n* @param (String) The string to be trimmed\n* @return (String) The trimmed string\n*/\n\nexport default function trimWhitespace(str, arr) {\n    const defaults = [/^\\s\\s*/, /\\s\\s*$/];\n    const newArr = Array.isArray(arr) ? arr.concat(defaults) : defaults;\n    let trimmedStr = str;\n    newArr.forEach((regEx) => {\n        trimmedStr = trimmedStr.replace(regEx, '');\n    });\n    return trimmedStr;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/util/trimWhitespace.js","import endMultiLineComment from './endMultiLineComment';\nimport trimMultiLine from './trimMultiLine';\nimport trimSingleLine from './trimSingleLine';\nimport singleLineComment from './singleLineComment';\nimport startMultiLineComment from './startMultiLineComment';\nimport trimWhitespace from './trimWhitespace';\nimport size from './size';\nimport squeeze from './squeeze';\nimport normalize from './normalize';\nimport getStrIndex from './getStrIndex';\nimport cleanLine from './cleanLine';\n\nexport default {\n    endMultiLineComment,\n    trimMultiLine,\n    trimSingleLine,\n    singleLineComment,\n    startMultiLineComment,\n    trimWhitespace,\n    size,\n    squeeze,\n    normalize,\n    getStrIndex,\n    cleanLine\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/util/index.js","/*\n * Check for single-line comment\n *\n * @param (String) line to parse/check\n * @return (Boolean) result of check\n */\nexport default function singleLineComment(line) {\n    return !!line.match(/^\\s*\\/\\//);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/util/singleLineComment.js","import {\n    singleLineComment,\n    startMultiLineComment,\n    endMultiLineComment,\n    trimSingleLine,\n    trimMultiLine,\n    trimWhitespace,\n    size,\n    normalize,\n    getStrIndex,\n    cleanLine\n} from './util';\n\nexport default class DSS {\n    constructor() {\n        this.parsers = {};\n        this.parse = this.parse.bind(this);\n        this.detector = this.detector.bind(this);\n        this.alias = this.alias.bind(this);\n        this.detect = () => true;\n    }\n\n    detector(callback) {\n        this.detect = callback;\n    }\n\n    parser(name, callback) {\n        this.parsers[name] = callback;\n    }\n\n    alias(newName, oldName) {\n        this.parsers[newName] = this.parsers[oldName];\n    }\n\n    parseLine(_temp, line, block, file, from, to, options) {\n        let temp = _temp;\n        const parts = line.replace(/.*@/, '');\n        const index = getStrIndex(parts, ' ') || getStrIndex(parts, '\\n') || getStrIndex(parts, '\\r') || parts.length;\n        const name = trimWhitespace(parts.substr(0, index));\n        const output = {\n            options,\n            file,\n            name,\n            line: {\n                contents: trimWhitespace(parts.substr(index)),\n                from: block.indexOf(line),\n                to: block.indexOf(line)\n            },\n            block: {\n                contents: block,\n                from,\n                to\n            }\n        };\n\n        // find the next instance of a parser (if there is one based on the @ symbol)\n        // in order to isolate the current multi-line parser\n        const nextParserIndex = block.indexOf('@', output.line.from + 1);\n        const markupLength = (nextParserIndex > -1) ? nextParserIndex - output.line.from : block.length;\n        const parserMarker = `@${name}`;\n        const contents = block.split('').splice(output.line.from, markupLength).join('').replace(parserMarker, '');\n\n        // Redefine output contents to support multiline contents\n        console.log(output.line.contents);\n        output.line.contents = cleanLine(contents, parserMarker);\n\n        const newLine = {};\n        newLine[name] = (this.parsers[name]) ? this.parsers[name].call(output, output) : '';\n\n        if (temp[name]) {\n            if (!Array.isArray(temp[name])) {\n                temp[name] = [temp[name]];\n            }\n            if (!Array.isArray(newLine[name])) {\n                temp[name].push(newLine[name]);\n            } else {\n                temp[name].push(newLine[name][0]);\n            }\n        } else {\n            temp = Object.assign({}, temp, newLine);\n        }\n        return temp;\n    }\n\n    parse(lines, options = {}, callback) {\n        // Setup\n        let currentBlock = '';\n        let insideSingleLineBlock = false;\n        let insideMultiLineBlock = false;\n        const unparsedBlocks = [];\n        let trimmed = '';\n        const parsedBlocks = [];\n        let temp = {};\n        let lineNum = 0;\n        let from = 0;\n        let to = 0;\n\n        lines.toString().split(/\\n/).forEach((line) => {\n            // Increment line number and ensure line is treated as a string\n            lineNum++;\n\n            // Store starting line number\n            if (singleLineComment(line) || startMultiLineComment(line)) {\n                from = lineNum;\n            }\n\n            // Parse Single line comment\n            if (singleLineComment(line)) {\n                trimmed = trimSingleLine(line);\n                if (insideSingleLineBlock) {\n                    currentBlock += `\\n${trimmed}`;\n                } else {\n                    currentBlock = trimmed;\n                    insideSingleLineBlock = true;\n                }\n            }\n\n            // Parse multi-line comments\n            if (startMultiLineComment(line) || insideMultiLineBlock) {\n                trimmed = trimMultiLine(line);\n                if (insideMultiLineBlock) {\n                    currentBlock += `\\n${trimmed}`;\n                } else {\n                    currentBlock += trimmed;\n                    insideMultiLineBlock = true;\n                }\n            }\n\n            // End a multi-line block\n            if (endMultiLineComment(line)) {\n                insideMultiLineBlock = false;\n            }\n\n            // Store current block if done\n            if (!singleLineComment(line) && !insideMultiLineBlock) {\n                if (currentBlock) {\n                    unparsedBlocks.push({ text: normalize(currentBlock), from, to: lineNum });\n                }\n                insideSingleLineBlock = false;\n                currentBlock = '';\n            }\n        });\n\n        // Create new blocks with custom parsing\n        unparsedBlocks.forEach((_block) => {\n            // Store line numbers\n            from = _block.from;\n            to = _block.to;\n\n            // Remove extra whitespace\n            const block = _block.text.split('\\n').filter(line => (\n                trimWhitespace(normalize(line))\n            )).join('\\n');\n\n            // Split block into lines\n            block.split('\\n').forEach((line) => {\n                if (this.detect(line)) {\n                    temp = this.parseLine(temp, line, block, lines, from, to, options);\n                }\n            });\n\n            // Push to blocks if object isn't empty\n            if (size(temp)) {\n                parsedBlocks.push(temp);\n            }\n            temp = {};\n        });\n\n        // Execute callback with filename and blocks\n        callback({ blocks: parsedBlocks });\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/dss.js","import trimWhitespace from './trimWhitespace';\n\nexport default function cleanLine(contents, parserMarker) {\n    const ret = [];\n    const lines = contents.split('\\n');\n\n    lines.forEach((line, i) => {\n        console.log(line);\n        const pattern = '*';\n        const index = line.indexOf(pattern);\n        let cleanedLine = line;\n\n        if (index >= 0 && index < 10) {\n            cleanedLine = cleanedLine.split('').splice((index + pattern.length), cleanedLine.length).join('');\n        }\n\n        // Trim whitespace from the the first line in multiline contents\n        if (i === 0) {\n            cleanedLine = trimWhitespace(cleanedLine);\n        }\n\n        if (cleanedLine && cleanedLine.indexOf(parserMarker) === -1) {\n            ret.push(cleanedLine);\n        }\n        console.log(cleanedLine);\n    });\n    return ret.join('\\n');\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/util/cleanLine.js","import singleLineComment from './singleLineComment';\n\n/*\n * Check for end of a multi-line comment\n *\n * @parse (String) line to parse/check\n * @return (Boolean) result of check\n */\nexport default function endMultiLineComment(line) {\n    if (singleLineComment(line)) {\n        return false;\n    }\n    return !!line.match(/.*\\*\\//);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/util/endMultiLineComment.js","/*\n * Get the index of string inside of another\n */\nexport default function getStrIndex(str, find) {\n    return (str.indexOf(find) > 0) ? str.indexOf(find) : false;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/util/getStrIndex.js","import trimWhitespace from './trimWhitespace';\n\n/*\n* Normalizes the comment block to ignore any consistent preceding\n* whitespace. Consistent means the same amount of whitespace on every line\n* of the comment block. Also strips any whitespace at the start and end of\n* the whole block.\n*\n* @param (String) Text block\n* @return (String) A cleaned up text block\n*/\n\nexport default function normalize(textBlock) {\n    // Strip consistent indenting by measuring first line's whitespace\n    let indentSize;\n    const normalized = textBlock.split('\\n').map((line) => {\n        const precedingWhitespace = line.match(/^\\s*/)[0].length;\n        if (!indentSize) indentSize = precedingWhitespace;\n        if (line === '') {\n            return '';\n        } else if (indentSize <= precedingWhitespace && indentSize > 0) {\n            return line.slice(indentSize, line.length);\n        }\n        return line;\n    }).join('\\n');\n\n    return normalized;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/util/normalize.js","export default function size(obj) {\n    return Object.keys(obj).length;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/util/size.js","export default function squeeze(str, def) {\n    return str.replace(/\\s{2,}/g, def);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/util/squeeze.js","/*\n * Checks for start of a multi-line comment\n *\n * @param (String) line to parse/check\n * @return (Boolean) result of check\n */\nexport default function startMultiLineComment(line) {\n    return !!line.match(/^\\s*\\/\\*/);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/util/startMultiLineComment.js","/*\n * Remove comment identifiers for multi-line comments.\n *\n * @param (String) line to parse/check\n * @return (Boolean) result of check\n */\nexport default function trimMultiLine(line) {\n    return line.replace(/^(\\/\\*|\\*\\/|\\*)+/g, '');\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/util/trimMultiLine.js","/*\n * Removes comment identifiers for single-line comments.\n *\n * @param (String) line to parse/check\n * @return (Boolean) result of check\n */\nexport default function trimSingleLine(line) {\n    return line.replace(/\\s*\\/\\//, '');\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/util/trimSingleLine.js","import DSS from './dss';\nimport { trimWhitespace } from './util';\n\nconst dss = new DSS();\n\n// Describe default detection pattern\ndss.detector((line) => {\n    if (typeof line !== 'string') {\n        return false;\n    }\n    const reference = line.split('\\n\\n').pop();\n    return !!reference.match(/.*@/);\n});\n\n// Describe default parsing of a name\ndss.parser('name', ({ line }) => line.contents);\n\n// Describe default parsing of a description\ndss.parser('description', ({ line }) => line.contents);\n\n// Describe default parsing of a state\ndss.parser('state', ({ line }) => {\n    const state = line.contents.split(' - ');\n    return [{\n        name: (state[0]) ? trimWhitespace(state[0]) : '',\n        escaped: (state[0]) ? trimWhitespace(state[0].replace('.', ' ').replace(':', ' pseudo-class-')) : '',\n        description: (state[1]) ? trimWhitespace(state[1]) : ''\n    }];\n});\n\n// Describe default parsing of a piece markup\ndss.parser('markup', ({ line }) => (\n    [{\n        example: line.contents,\n        escaped: line.contents.replace(/</g, '&lt;').replace(/>/g, '&gt;')\n    }]\n));\n\nexport default dss;\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js"],"sourceRoot":""}